import java.text.SimpleDateFormat

/*
 * Copyright 2017-present, Nam Seob Seo
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 */

buildscript {
    ext {
        buildDateTime = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date())
    }
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'org.springframework.experimental.aot' version '0.10.3'
}

apply from: file('gradle/bdd.gradle')

allprojects {
    group = "$appGroupName"
    version = "$appVersion"
}

wrapper {
    gradleVersion = '7.2'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/release' }
    }

    dependencies {
        implementation('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
        implementation('org.springframework.boot:spring-boot-starter-security')
        implementation('org.springframework.boot:spring-boot-starter-webflux')
        implementation('org.springframework.boot:spring-boot-starter-actuator')
        implementation('org.springframework.boot:spring-boot-starter-validation')
        implementation('org.springframework.boot:spring-boot-configuration-processor')
        compileOnly('org.projectlombok:lombok')
        annotationProcessor("org.projectlombok:lombok")
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.projectreactor:reactor-test')
        testImplementation('org.springframework.security:spring-security-test')
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    test {
        useJUnitPlatform()
    }
}


def reactProjectDir = "$projectDir/ns-svg-converter-react"
task buildReact(type: Exec) {
    workingDir = "$reactProjectDir"
    group = 'react'
    commandLine "yarn", "build"
}


def springBootStaticDir = "$projectDir/ns-main-service/src/main/resources/static"

task deleteWebStaticFiles(type: Delete) {
    doLast {
        project.delete(files("$springBootStaticDir"))
    }
}


task deployReactDist(dependsOn: ['buildReact', 'deleteWebStaticFiles']) {
    group = 'react'
    doLast {
        copy {
            from "$reactProjectDir/build"
            into "$springBootStaticDir"
            include '**/*'
        }
    }
}
